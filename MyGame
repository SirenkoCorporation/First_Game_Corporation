import pygame

clock = pygame.time.Clock()

# image_path = '/data/data/com.Alex_Games.myapp/files/app'


pygame.init()

screen = pygame.display.set_mode((1280,720))            # Размер моего окна

pygame.display.set_caption("Игра Sirenko_Corporation")
runnig = True
icon = pygame.image.load('images/icon.png')
pygame.display.set_icon(icon)

# square = pygame.Surface((50,170))                   # Задаю квадрат
# square.fill(('Brown'))                              # Цвет квадрата

label = pygame.font.Font('Fonts/PlaywriteIS-ExtraLight.ttf',29)   # Надпись на экране проигрыша
lose_label = label.render("YOU LOSED!",True,(255, 0, 9))
restart_label = label.render("Go again",True ,(255, 0, 9))
restart_label_rect = restart_label.get_rect(topleft=(550,550))

player = pygame.image.load('images/personage.pnj.png')

ghost = pygame.image.load('images/Ghost.png').convert_alpha()
# ghost_x = 1080
ghost_time = pygame.USEREVENT + 1
pygame.time.set_timer(ghost_time,1500)  # Появление монстров
ghost_list_in_game = []


background = pygame.image.load('images/i.webp').convert_alpha()   # Задний фон
background_x = 0

player_speed = 5
player_x = 150

player_y = 600
jump = False
jump_count = 11


bg_sound = pygame.mixer.Sound('Music/Фон.sing.mp3 ')   # Музыка для заднего фона
bg_sound.play()


lose_sound = pygame.mixer.Sound('Music/Lose.mp3')



player_mario = pygame.image.load('images/player.left/x1670754038.png.pagespeed.ic.Z3RY1P6uWG.png').convert_alpha()

walk_left_mario = [pygame.image.load('images/player.left/x1670754038.png.pagespeed.ic.Z3RY1P6uWG.png'),
                   pygame.image.load('images/player.left/x1670754040.png.pagespeed.ic.0r_ddSlRA4.png'),
                   pygame.image.load('images/player.left/x1670754060.png.pagespeed.ic.PUz1mcKFEQ.png'),
                   pygame.image.load('images/player.left/x1670754063.png.pagespeed.ic.ZLIwwbttaI.png')
                   ]   # Массив для анимации игрока влево
walk_right_mario = [pygame.image.load('images/player.right/x1670754087.png.pagespeed.ic.Mm-kzS5ir9.png'),
                    pygame.image.load('images/player.right/x1670754090.png.pagespeed.ic.EH9Ha_DKYl.png'),
                    pygame.image.load('images/player.right/x1670754092.png.pagespeed.ic.Mm-kzS5ir9.png'),
                    pygame.image.load('images/player.right/x1670754094.png.pagespeed.ic.z7wU1JdYm-.png')
                    ]



player_anim_count = 0


myfont = pygame.font.Font('fonts/PlaywriteIS-ExtraLight.ttf', 20)     # Задаём параметры шрифта
text_surface = myfont.render('Sirenko_Corporation',True,'Purple')   # True - сглаживание


gameplay = True       # Для завершения игры


bullet = pygame.image.load('images/2218103.png').convert_alpha()   # Пуля
bullets = []
bullets_left = 5

while runnig:




    screen.blit(background,(background_x,0))
    screen.blit(background,(background_x+1280,0))


    if gameplay:


        play_rect = walk_left_mario[0].get_rect(topleft=(player_x,player_y))    # Квадрат вокруг монстра
        # ghost_rect = ghost.get_rect(topleft=(ghost_x,550))

        if ghost_list_in_game:
            for (i,el) in  enumerate(ghost_list_in_game):
                screen.blit(ghost,el)
                el.x -= 10

                if el.x < -10:
                    ghost_list_in_game.pop(i)

                if play_rect.colliderect(el):           # Отслеживание соприкосновение с квадратом
                    gameplay = False

        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT]:

            screen.blit(walk_left_mario[player_anim_count],(player_x,player_y))
        else:
            screen.blit(walk_right_mario[player_anim_count], (player_x, player_y))


        # keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player_x > 50:
            player_x -= player_speed
        elif keys[pygame.K_RIGHT] and player_x < 1200:   # Границы передвижения
            player_x += player_speed




        if not jump:                               # Прыжок
            if keys[pygame.K_SPACE]:
                jump = True
        else:
            if jump_count >= -11:
                if jump_count > 0:
                    player_y -= (jump_count ** 2) / 2
                else:
                    player_y += (jump_count ** 2) / 2
                jump_count -= 1
            else:
                jump = False
                jump_count = 11


        if player_anim_count == 3:
            player_anim_count = 0
        else:
            player_anim_count += 1

        background_x -= 2
        if background_x == -1280:
             background_x = 0

        if bullets:
            for (i,el) in enumerate(bullets):
                screen.blit(bullet,(el.x,el.y))
                el.x += 6

                if el.x > 1100:
                    bullets.pop(i)

                if ghost_list_in_game:                  # Столкновение патрона с монстром
                    for (index,ghost_el) in enumerate(ghost_list_in_game):
                        if el.colliderect(ghost_el):
                            ghost_list_in_game.pop(index)
                            bullets.pop(i)


        # screen.blit(square,(300,12))               # Координаты квадрата
        # pygame.draw.circle(square ,'Blue',(10,9),5)
        screen.blit(text_surface,(550,150))   # Вывожу на фон свой текст с координатами
        # screen.blit(player,(950 ,0))          # Вывожу персонажа на экран игры
    else:
        screen.fill(("Black"))
        screen.blit(lose_label,(530,300))
        lose_sound.play()
        bg_sound.stop()

        screen.blit(restart_label,(restart_label_rect))
        bg_sound.play()

        mouse = pygame.mouse.get_pos()     # Координаты мышки
        if restart_label_rect.collidepoint(mouse) and pygame.mouse.get_pressed()[0]:  # Выявление на соприкосновение
                gameplay = True
                player_x = 150     # Возвращаем игро на исходное место при начале игры
                ghost_list_in_game.clear()     # Очищаем монстров, для повторной игры
                bullets.clear()
                bullets_left = 5




    pygame.display.update()

    for even in pygame.event.get():
        if even.type == pygame.QUIT:
            runnig = False
            pygame.quit()

        if even.type == ghost_time:
            ghost_list_in_game.append(ghost.get_rect(topleft=(1080,550)))
        if gameplay and even.type == pygame.KEYUP and even.key == pygame.K_f and bullets_left > 1 :
            bullets.append((bullet.get_rect(topleft=(player_x+40,player_y+(-20)))))
            bullets_left -= 1


    clock.tick(40)    # Значение для корректировки ходьбы игрока



